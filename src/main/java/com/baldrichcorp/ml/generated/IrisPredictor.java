package com.baldrichcorp.ml.generated;

/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2016-10-03T18:20:55.891-05:00
  3.10.0.2
  
  Standalone prediction code with sample test data for DRFModel named IrisPredictor

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/IrisPredictor > IrisPredictor.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m IrisPredictor.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="IrisPredictor", algorithm="drf")
public class IrisPredictor extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 4; }
  public int nclasses() { return 3; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_IrisPredictor.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 3;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* sepal_len */ null,
    /* sepal_wid */ null,
    /* petal_len */ null,
    /* petal_wid */ null,
    /* class */ IrisPredictor_ColInfo_4.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.3333333333333333,0.3333333333333333,0.3333333333333333};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.3333333333333333,0.3333333333333333,0.3333333333333333};

  public IrisPredictor() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-3286584815714178262L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    IrisPredictor_Forest_0.score0(data,preds);
    IrisPredictor_Forest_1.score0(data,preds);
    IrisPredictor_Forest_2.score0(data,preds);
    IrisPredictor_Forest_3.score0(data,preds);
    IrisPredictor_Forest_4.score0(data,preds);
    IrisPredictor_Forest_5.score0(data,preds);
    IrisPredictor_Forest_6.score0(data,preds);
    IrisPredictor_Forest_7.score0(data,preds);
    IrisPredictor_Forest_8.score0(data,preds);
    IrisPredictor_Forest_9.score0(data,preds);
    IrisPredictor_Forest_10.score0(data,preds);
    IrisPredictor_Forest_11.score0(data,preds);
    IrisPredictor_Forest_12.score0(data,preds);
    IrisPredictor_Forest_13.score0(data,preds);
    IrisPredictor_Forest_14.score0(data,preds);
    IrisPredictor_Forest_15.score0(data,preds);
    IrisPredictor_Forest_16.score0(data,preds);
    IrisPredictor_Forest_17.score0(data,preds);
    IrisPredictor_Forest_18.score0(data,preds);
    IrisPredictor_Forest_19.score0(data,preds);
    IrisPredictor_Forest_20.score0(data,preds);
    IrisPredictor_Forest_21.score0(data,preds);
    IrisPredictor_Forest_22.score0(data,preds);
    IrisPredictor_Forest_23.score0(data,preds);
    IrisPredictor_Forest_24.score0(data,preds);
    IrisPredictor_Forest_25.score0(data,preds);
    IrisPredictor_Forest_26.score0(data,preds);
    IrisPredictor_Forest_27.score0(data,preds);
    IrisPredictor_Forest_28.score0(data,preds);
    IrisPredictor_Forest_29.score0(data,preds);
    IrisPredictor_Forest_30.score0(data,preds);
    IrisPredictor_Forest_31.score0(data,preds);
    IrisPredictor_Forest_32.score0(data,preds);
    IrisPredictor_Forest_33.score0(data,preds);
    IrisPredictor_Forest_34.score0(data,preds);
    IrisPredictor_Forest_35.score0(data,preds);
    IrisPredictor_Forest_36.score0(data,preds);
    IrisPredictor_Forest_37.score0(data,preds);
    IrisPredictor_Forest_38.score0(data,preds);
    IrisPredictor_Forest_39.score0(data,preds);
    IrisPredictor_Forest_40.score0(data,preds);
    IrisPredictor_Forest_41.score0(data,preds);
    IrisPredictor_Forest_42.score0(data,preds);
    IrisPredictor_Forest_43.score0(data,preds);
    IrisPredictor_Forest_44.score0(data,preds);
    IrisPredictor_Forest_45.score0(data,preds);
    IrisPredictor_Forest_46.score0(data,preds);
    IrisPredictor_Forest_47.score0(data,preds);
    IrisPredictor_Forest_48.score0(data,preds);
    IrisPredictor_Forest_49.score0(data,preds);
    double sum = 0;
    for(int i=1; i<preds.length; i++) { sum += preds[i]; }
    if (sum>0) for(int i=1; i<preds.length; i++) { preds[i] /= sum; }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5 );
    return preds;
  }
}
// The class representing training column names
class NamesHolder_IrisPredictor implements java.io.Serializable {
  public static final String[] VALUES = new String[4];
  static {
    NamesHolder_IrisPredictor_0.fill(VALUES);
  }
  static final class NamesHolder_IrisPredictor_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "sepal_len";
      sa[1] = "sepal_wid";
      sa[2] = "petal_len";
      sa[3] = "petal_wid";
    }
  }
}
// The class representing column class
class IrisPredictor_ColInfo_4 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    IrisPredictor_ColInfo_4_0.fill(VALUES);
  }
  static final class IrisPredictor_ColInfo_4_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "Iris-setosa";
      sa[1] = "Iris-versicolor";
      sa[2] = "Iris-virginica";
    }
  }
}

class IrisPredictor_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_0_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_0_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_0_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_0_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (data[2 /* petal_len */] <4.952539f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.7504206f ? 
                1.0f : 
                 (data[0 /* sepal_len */] <6.2578125f ? 
                    0.0f : 
                    1.0f)) : 
             (data[3 /* petal_wid */] <1.7499542f ? 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6501626f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class IrisPredictor_Tree_0_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.952539f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6500976f ? 
                1.0f : 
                0.0f)) : 
        0.9782609f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class IrisPredictor_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_1_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_1_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_1_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_1_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6487312f ? 
             (Double.isNaN(data[0]) || data[0 /* sepal_len */] <7.0984373f ? 
                 (data[1 /* sepal_wid */] <2.2488282f ? 
                     (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.733594f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.346875f ? 
                        1.0f : 
                         (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.240625f ? 
                            1.0f : 
                            0.0f))) : 
                0.0f) : 
             (data[2 /* petal_len */] <4.8488283f ? 
                 (data[3 /* petal_wid */] <1.7484893f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class IrisPredictor_Tree_1_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.5501953f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.952539f ? 
                0.0f : 
                1.0f) : 
             (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.1484375f ? 
                1.0f : 
                0.0f)) : 
         (data[0 /* sepal_len */] <6.1f ? 
             (data[3 /* petal_wid */] <1.8510742f ? 
                0.0f : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class IrisPredictor_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_2_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_2_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_2_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_2_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.7001724f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.952539f ? 
                1.0f : 
                0.0f) : 
             (data[3 /* petal_wid */] <1.848578f ? 
                 (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.0992188f ? 
                    0.0f : 
                     (data[0 /* sepal_len */] <6.540625f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class IrisPredictor_Tree_2_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <5.948828f ? 
            0.0f : 
             (data[1 /* sepal_wid */] <2.8484375f ? 
                 (data[3 /* petal_wid */] <1.2015625f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.3984375f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)) : 
         (data[2 /* petal_len */] <4.8488283f ? 
             (data[1 /* sepal_wid */] <2.9984374f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class IrisPredictor_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_3_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_3_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_3_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_3_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.5507812f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.2470703f ? 
                1.0f : 
                0.0f) : 
             (data[3 /* petal_wid */] <1.7510071f ? 
                 (data[3 /* petal_wid */] <1.6501391f ? 
                    0.0f : 
                    1.0f) : 
                 (data[0 /* sepal_len */] <5.9453125f ? 
                     (data[2 /* petal_len */] <4.865625f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class IrisPredictor_Tree_3_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.750879f ? 
        0.010526316f : 
         (data[2 /* petal_len */] <5.051f ? 
             (data[3 /* petal_wid */] <1.7501953f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.098828f ? 
                    1.0f : 
                    0.0f)) : 
            1.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}


class IrisPredictor_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_4_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_4_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_4_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_4_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.7499542f ? 
             (Double.isNaN(data[0]) || data[0 /* sepal_len */] <7.0984373f ? 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.894922f ? 
                     (data[1 /* sepal_wid */] <2.546875f ? 
                         (data[0 /* sepal_len */] <4.9687014f ? 
                             (data[3 /* petal_wid */] <1.3562282f ? 
                                1.0f : 
                                0.0f) : 
                            1.0f) : 
                        1.0f) : 
                     (data[3 /* petal_wid */] <1.5507476f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (data[0 /* sepal_len */] <6.0015626f ? 
                 (data[2 /* petal_len */] <4.894922f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class IrisPredictor_Tree_4_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.450293f ? 
            0.0f : 
             (data[1 /* sepal_wid */] <2.6015625f ? 
                1.0f : 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.033203f ? 
                    0.0f : 
                     (data[1 /* sepal_wid */] <2.7450318f ? 
                        0.0f : 
                        1.0f)))) : 
         (data[0 /* sepal_len */] <6.0015626f ? 
             (data[2 /* petal_len */] <4.894922f ? 
                0.0f : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class IrisPredictor_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_5_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_5_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_5_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* sepal_len */] <5.4496093f ? 
         (data[1 /* sepal_wid */] <2.7992187f ? 
             (data[0 /* sepal_len */] <4.698828f ? 
                1.0f : 
                0.0f) : 
            1.0f) : 
         (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.8984375f ? 
             (data[0 /* sepal_len */] <5.5515623f ? 
                 (data[2 /* petal_len */] <2.4980469f ? 
                    1.0f : 
                    0.0f) : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class IrisPredictor_Tree_5_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* sepal_wid */] <2.9492188f ? 
         (data[0 /* sepal_len */] <4.7007813f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.45f ? 
                1.0f : 
                 (data[2 /* petal_len */] <4.710547f ? 
                    1.0f : 
                     (data[0 /* sepal_len */] <6.096875f ? 
                         (data[3 /* petal_wid */] <1.7617188f ? 
                             (data[1 /* sepal_wid */] <2.4625f ? 
                                0.0f : 
                                1.0f) : 
                            0.0f) : 
                        0.0f)))) : 
         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <5.548047f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.999643f ? 
                 (data[3 /* petal_wid */] <1.703125f ? 
                     (data[2 /* petal_len */] <2.84375f ? 
                        0.0f : 
                        1.0f) : 
                     (data[2 /* petal_len */] <4.871875f ? 
                         (data[0 /* sepal_len */] <5.9625f ? 
                            1.0f : 
                            0.0f) : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 54B, number of visited nodes = 13, static init size = 0B
}

class IrisPredictor_Tree_5_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.1509767f ? 
         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <5.7496905f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.703125f ? 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.8488283f ? 
                    0.0f : 
                     (data[2 /* petal_len */] <5.0489807f ? 
                        1.0f : 
                        0.0f)) : 
                 (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.096875f ? 
                    1.0f : 
                    0.0f))) : 
         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.999868f ? 
             (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.2492187f ? 
                 (data[1 /* sepal_wid */] <2.4001129f ? 
                    0.0f : 
                     (data[2 /* petal_len */] <4.9640627f ? 
                         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6375f ? 
                            0.0f : 
                            1.0f) : 
                        1.0f)) : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}


class IrisPredictor_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_6_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_6_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_6_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_6_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (data[2 /* petal_len */] <4.750879f ? 
            1.0f : 
             (data[3 /* petal_wid */] <1.7499542f ? 
                 (data[3 /* petal_wid */] <1.550772f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6498687f ? 
                         (data[0 /* sepal_len */] <6.6f ? 
                            1.0f : 
                            0.0f) : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class IrisPredictor_Tree_6_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.85459f ? 
            0.0f : 
             (data[3 /* petal_wid */] <1.5501953f ? 
                1.0f : 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.649675f ? 
                     (data[0 /* sepal_len */] <6.6f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))) : 
        0.9782609f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class IrisPredictor_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_7_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_7_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_7_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_7_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.8497286f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.7498436f ? 
                1.0f : 
                 (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.0007813f ? 
                     (data[3 /* petal_wid */] <1.609375f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f)) : 
             (data[1 /* sepal_wid */] <2.5484376f ? 
                 (data[3 /* petal_wid */] <1.6972656f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class IrisPredictor_Tree_7_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.2521486f ? 
            0.0f : 
            1.0f) : 
         (data[2 /* petal_len */] <4.8488283f ? 
             (data[1 /* sepal_wid */] <2.9984374f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}


class IrisPredictor_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_8_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_8_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_8_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_8_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.9496355f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6515625f ? 
                1.0f : 
                0.0f) : 
             (data[3 /* petal_wid */] <1.75f ? 
                 (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.496875f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class IrisPredictor_Tree_8_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.952539f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6500976f ? 
                0.0f : 
                1.0f) : 
             (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.500781f ? 
                1.0f : 
                0.0f)) : 
        0.9782609f);
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}


class IrisPredictor_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_9_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_9_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_9_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_9_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (data[3 /* petal_wid */] <1.6487312f ? 
             (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.2476563f ? 
                1.0f : 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.9410157f ? 
                    1.0f : 
                    0.0f)) : 
             (data[3 /* petal_wid */] <1.7501519f ? 
                 (data[2 /* petal_len */] <4.733594f ? 
                    0.0f : 
                    1.0f) : 
                 (data[2 /* petal_len */] <4.8488283f ? 
                     (data[0 /* sepal_len */] <5.9546876f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class IrisPredictor_Tree_9_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6500976f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.4502803f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.894922f ? 
                    0.0f : 
                     (data[0 /* sepal_len */] <6.155469f ? 
                        0.0f : 
                        1.0f))) : 
             (data[1 /* sepal_wid */] <2.75f ? 
                1.0f : 
                0.0f)) : 
         (data[0 /* sepal_len */] <5.948828f ? 
             (data[2 /* petal_len */] <4.8488283f ? 
                0.0f : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class IrisPredictor_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_10_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_10_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_10_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_10_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (data[0 /* sepal_len */] <6.1527343f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.8497286f ? 
                1.0f : 
                 (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <2.74375f ? 
                     (data[1 /* sepal_wid */] <2.650293f ? 
                        0.0f : 
                         (data[3 /* petal_wid */] <1.74375f ? 
                            1.0f : 
                            0.0f)) : 
                    0.0f)) : 
             (data[3 /* petal_wid */] <1.75f ? 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.40625f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class IrisPredictor_Tree_10_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.750879f ? 
        0.010526316f : 
         (data[3 /* petal_wid */] <1.75f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.349219f ? 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.55f ? 
                     (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.95f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                1.0f) : 
             (data[2 /* petal_len */] <4.851953f ? 
                 (data[1 /* sepal_wid */] <2.9976563f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class IrisPredictor_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_11_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_11_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_11_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* sepal_len */] <5.4496093f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <2.6017578f ? 
            1.0f : 
            0.0f) : 
         (data[2 /* petal_len */] <2.5959961f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class IrisPredictor_Tree_11_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* sepal_wid */] <2.9492188f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.750879f ? 
             (data[3 /* petal_wid */] <0.653125f ? 
                0.0f : 
                 (data[0 /* sepal_len */] <4.9507813f ? 
                     (data[3 /* petal_wid */] <1.3483155f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f)) : 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.198672f ? 
                 (data[3 /* petal_wid */] <1.703125f ? 
                     (data[1 /* sepal_wid */] <2.3485413f ? 
                        0.0f : 
                         (data[0 /* sepal_len */] <6.125f ? 
                            1.0f : 
                             (data[2 /* petal_len */] <5.0f ? 
                                1.0f : 
                                0.0f))) : 
                    0.0f) : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <3.005078f ? 
            0.0f : 
             (data[2 /* petal_len */] <4.852539f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}

class IrisPredictor_Tree_11_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.1509767f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.8488283f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6515625f ? 
                0.0f : 
                 (data[1 /* sepal_wid */] <2.84375f ? 
                    1.0f : 
                    0.0f)) : 
             (data[0 /* sepal_len */] <5.9472656f ? 
                1.0f : 
                 (data[3 /* petal_wid */] <1.553125f ? 
                    1.0f : 
                     (data[0 /* sepal_len */] <6.049884f ? 
                        0.0f : 
                        1.0f)))) : 
         (data[3 /* petal_wid */] <1.6492188f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.003125f ? 
                0.0f : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class IrisPredictor_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_12_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_12_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_12_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_12_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.7499542f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.952539f ? 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6503509f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6503509f ? 
                    0.0f : 
                    1.0f)) : 
             (data[0 /* sepal_len */] <5.9453125f ? 
                 (data[2 /* petal_len */] <4.894922f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class IrisPredictor_Tree_12_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.450293f ? 
            0.0f : 
             (data[0 /* sepal_len */] <5.150781f ? 
                1.0f : 
                 (Double.isNaN(data[0]) || data[0 /* sepal_len */] <7.0479097f ? 
                     (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.9640627f ? 
                        0.0f : 
                         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6f ? 
                            1.0f : 
                            0.0f)) : 
                    1.0f))) : 
         (data[2 /* petal_len */] <4.8488283f ? 
             (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.0992188f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class IrisPredictor_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_13_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_13_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_13_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_13_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6487312f ? 
             (Double.isNaN(data[0]) || data[0 /* sepal_len */] <7.103125f ? 
                1.0f : 
                0.0f) : 
             (data[2 /* petal_len */] <4.8488283f ? 
                 (data[3 /* petal_wid */] <1.75f ? 
                    0.0f : 
                     (data[0 /* sepal_len */] <6.047656f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class IrisPredictor_Tree_13_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <7.0984373f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.646875f ? 
                0.0f : 
                1.0f) : 
            1.0f) : 
         (data[0 /* sepal_len */] <6.0507812f ? 
             (data[3 /* petal_wid */] <1.8505859f ? 
                0.0f : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class IrisPredictor_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_14_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_14_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_14_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* sepal_len */] <5.4496093f ? 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <0.80078125f ? 
            1.0f : 
            0.0f) : 
         (data[2 /* petal_len */] <2.5959961f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class IrisPredictor_Tree_14_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* sepal_wid */] <2.9492188f ? 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6515625f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.952539f ? 
                 (data[2 /* petal_len */] <2.1560638f ? 
                    0.0f : 
                    1.0f) : 
                 (data[1 /* sepal_wid */] <2.45f ? 
                    0.0f : 
                     (data[1 /* sepal_wid */] <2.7480469f ? 
                        1.0f : 
                        0.0f))) : 
            0.0f) : 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <3.005078f ? 
            0.0f : 
             (data[3 /* petal_wid */] <1.75f ? 
                1.0f : 
                 (data[2 /* petal_len */] <4.9429655f ? 
                     (data[1 /* sepal_wid */] <3.103125f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class IrisPredictor_Tree_14_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.1509767f ? 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6515625f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.8488283f ? 
                0.0f : 
                 (data[1 /* sepal_wid */] <2.446875f ? 
                    1.0f : 
                    0.0f)) : 
             (Double.isNaN(data[0]) || data[0 /* sepal_len */] <5.850916f ? 
                1.0f : 
                0.5f)) : 
         (data[2 /* petal_len */] <5.0504885f ? 
             (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <2.8507812f ? 
                 (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.396933f ? 
                     (data[3 /* petal_wid */] <1.65625f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class IrisPredictor_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_15_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_15_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_15_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_15_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
             (Double.isNaN(data[0]) || data[0 /* sepal_len */] <7.0984373f ? 
                 (data[1 /* sepal_wid */] <2.2515626f ? 
                     (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.7625f ? 
                        1.0f : 
                        0.0f) : 
                     (data[1 /* sepal_wid */] <2.646338f ? 
                         (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.26875f ? 
                            1.0f : 
                            0.0f) : 
                        1.0f)) : 
                0.0f) : 
             (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.1484375f ? 
                0.0f : 
                 (data[3 /* petal_wid */] <1.9011719f ? 
                     (data[2 /* petal_len */] <5.38125f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class IrisPredictor_Tree_15_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.952539f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.646875f ? 
                1.0f : 
                0.0f)) : 
         (data[0 /* sepal_len */] <6.0015626f ? 
             (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.0992188f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class IrisPredictor_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_16_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_16_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_16_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_16_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (data[2 /* petal_len */] <4.8497286f ? 
             (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.15625f ? 
                1.0f : 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6503906f ? 
                    1.0f : 
                    0.0f)) : 
             (data[3 /* petal_wid */] <1.75f ? 
                 (data[0 /* sepal_len */] <6.2125f ? 
                    0.0f : 
                     (data[1 /* sepal_wid */] <2.74375f ? 
                        1.0f : 
                         (data[3 /* petal_wid */] <1.646875f ? 
                            0.0f : 
                            1.0f))) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class IrisPredictor_Tree_16_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.952539f ? 
            0.0f : 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.646875f ? 
                1.0f : 
                0.0f)) : 
         (data[0 /* sepal_len */] <6.0015626f ? 
             (data[0 /* sepal_len */] <5.799997f ? 
                1.0f : 
                 (data[1 /* sepal_wid */] <3.0992188f ? 
                    1.0f : 
                    0.0f)) : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class IrisPredictor_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_17_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_17_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_17_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_17_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.7499542f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.298828f ? 
                 (data[1 /* sepal_wid */] <2.54375f ? 
                     (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <2.450293f ? 
                        1.0f : 
                         (data[2 /* petal_len */] <4.675f ? 
                            0.0f : 
                            1.0f)) : 
                    1.0f) : 
                0.0f) : 
             (data[0 /* sepal_len */] <5.9453125f ? 
                 (data[3 /* petal_wid */] <1.8489846f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class IrisPredictor_Tree_17_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.3040037f ? 
             (data[1 /* sepal_wid */] <2.5484376f ? 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.59375f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
            1.0f) : 
         (data[2 /* petal_len */] <4.8488283f ? 
             (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.096875f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class IrisPredictor_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_18_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_18_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_18_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_18_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (data[2 /* petal_len */] <4.8497286f ? 
             (data[0 /* sepal_len */] <5.0039062f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.703125f ? 
                    1.0f : 
                     (data[0 /* sepal_len */] <5.939575f ? 
                        1.0f : 
                        0.0f))) : 
             (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.6007814f ? 
                0.0f : 
                 (data[3 /* petal_wid */] <1.75f ? 
                     (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.394332f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class IrisPredictor_Tree_18_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.952539f ? 
             (data[1 /* sepal_wid */] <2.6f ? 
                 (data[0 /* sepal_len */] <4.999219f ? 
                    1.0f : 
                    0.0f) : 
                0.0f) : 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6500976f ? 
                1.0f : 
                0.0f)) : 
         (data[0 /* sepal_len */] <5.948828f ? 
             (data[3 /* petal_wid */] <1.8510742f ? 
                 (data[2 /* petal_len */] <4.9410157f ? 
                    0.0f : 
                    1.0f) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class IrisPredictor_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_19_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_19_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_19_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_19_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (data[2 /* petal_len */] <4.750879f ? 
             (data[0 /* sepal_len */] <4.9546876f ? 
                 (data[1 /* sepal_wid */] <2.45f ? 
                    1.0f : 
                    0.0f) : 
                1.0f) : 
             (data[1 /* sepal_wid */] <2.75f ? 
                 (data[3 /* petal_wid */] <1.7034912f ? 
                     (data[1 /* sepal_wid */] <2.3503907f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                 (data[3 /* petal_wid */] <1.7499542f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class IrisPredictor_Tree_19_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.952539f ? 
             (data[1 /* sepal_wid */] <2.5484376f ? 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6017578f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
             (data[1 /* sepal_wid */] <2.45f ? 
                1.0f : 
                0.0f)) : 
        0.9782609f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class IrisPredictor_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_20_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_20_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_20_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_20_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.449707f ? 
                1.0f : 
                 (data[1 /* sepal_wid */] <2.846875f ? 
                     (data[2 /* petal_len */] <4.745477f ? 
                        1.0f : 
                        0.0f) : 
                     (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.9375f ? 
                        1.0f : 
                        0.0f))) : 
             (data[0 /* sepal_len */] <5.95f ? 
                 (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <2.99375f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class IrisPredictor_Tree_20_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.750879f ? 
        0.010526316f : 
         (data[3 /* petal_wid */] <1.8507812f ? 
             (data[0 /* sepal_len */] <5.9453125f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.597162f ? 
                    1.0f : 
                     (data[2 /* petal_len */] <5.4056892f ? 
                        0.0f : 
                        1.0f))) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class IrisPredictor_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_21_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_21_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_21_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_21_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.7001724f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.998633f ? 
                1.0f : 
                 (data[1 /* sepal_wid */] <2.7464843f ? 
                     (data[0 /* sepal_len */] <6.071875f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f)) : 
             (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.1496093f ? 
                0.0f : 
                 (data[3 /* petal_wid */] <1.9969834f ? 
                    0.5f : 
                    0.0f))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class IrisPredictor_Tree_21_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.3503907f ? 
            0.0f : 
             (data[1 /* sepal_wid */] <2.8490233f ? 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.549298f ? 
                    1.0f : 
                    0.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* sepal_len */] <7.094531f ? 
                    0.0f : 
                    1.0f))) : 
         (data[2 /* petal_len */] <4.8488283f ? 
             (data[1 /* sepal_wid */] <3.0001953f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class IrisPredictor_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_22_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_22_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_22_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_22_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.7499542f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.5492829f ? 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.9410157f ? 
                    1.0f : 
                    0.0f) : 
                 (data[0 /* sepal_len */] <5.453125f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.4710937f ? 
                        1.0f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class IrisPredictor_Tree_22_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.5501953f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.952539f ? 
                0.0f : 
                1.0f) : 
             (data[0 /* sepal_len */] <5.4460936f ? 
                1.0f : 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.4480467f ? 
                    0.0f : 
                    1.0f))) : 
        0.9782609f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class IrisPredictor_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_23_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_23_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_23_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_23_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (data[3 /* petal_wid */] <1.5491676f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.952539f ? 
                1.0f : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class IrisPredictor_Tree_23_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.5501953f ? 
             (data[1 /* sepal_wid */] <2.253125f ? 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.733594f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.253125f ? 
                    0.0f : 
                     (data[0 /* sepal_len */] <6.351392f ? 
                         (data[1 /* sepal_wid */] <2.659375f ? 
                            0.0f : 
                            1.0f) : 
                        0.0f))) : 
            1.0f) : 
        0.9782609f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class IrisPredictor_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_24_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_24_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_24_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* sepal_len */] <5.4496093f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <2.4519532f ? 
            1.0f : 
            0.0f) : 
         (data[2 /* petal_len */] <2.4461913f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class IrisPredictor_Tree_24_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* sepal_wid */] <2.9492188f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.750879f ? 
             (data[0 /* sepal_len */] <4.946875f ? 
                 (data[0 /* sepal_len */] <4.7007446f ? 
                    0.0f : 
                     (data[1 /* sepal_wid */] <2.45f ? 
                        1.0f : 
                        0.0f)) : 
                1.0f) : 
             (data[3 /* petal_wid */] <1.703125f ? 
                 (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <2.6503906f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <3.0511718f ? 
            0.0f : 
             (data[2 /* petal_len */] <4.9988685f ? 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.703125f ? 
                    1.0f : 
                     (data[0 /* sepal_len */] <5.99375f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class IrisPredictor_Tree_24_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.1509767f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.8488283f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.4504147f ? 
                0.0f : 
                 (data[0 /* sepal_len */] <5.25f ? 
                    1.0f : 
                    0.0f)) : 
             (data[3 /* petal_wid */] <1.703125f ? 
                 (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <2.6445312f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)) : 
         (data[2 /* petal_len */] <4.952539f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.749895f ? 
                0.0f : 
                 (data[0 /* sepal_len */] <6.55f ? 
                    1.0f : 
                    0.0f)) : 
            1.0f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class IrisPredictor_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_25_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_25_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_25_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* sepal_len */] <5.4496093f ? 
         (data[1 /* sepal_wid */] <2.8507812f ? 
             (data[0 /* sepal_len */] <4.698828f ? 
                1.0f : 
                0.0f) : 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <3.2009766f ? 
                1.0f : 
                0.0f)) : 
         (data[2 /* petal_len */] <2.4000976f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class IrisPredictor_Tree_25_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* sepal_wid */] <2.9492188f ? 
         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.251172f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6515625f ? 
                 (data[0 /* sepal_len */] <4.705859f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.871875f ? 
                        1.0f : 
                         (data[1 /* sepal_wid */] <2.4515624f ? 
                            0.0f : 
                            1.0f))) : 
                0.0f) : 
             (data[2 /* petal_len */] <4.7566404f ? 
                1.0f : 
                0.0f)) : 
         (data[2 /* petal_len */] <3.0511718f ? 
            0.0f : 
             (data[2 /* petal_len */] <5.051965f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class IrisPredictor_Tree_25_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.1509767f ? 
         (data[1 /* sepal_wid */] <2.8484375f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.45f ? 
                0.0f : 
                 (data[3 /* petal_wid */] <1.6503906f ? 
                     (data[2 /* petal_len */] <5.0484376f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f)) : 
            0.0f) : 
         (data[2 /* petal_len */] <4.750879f ? 
            0.0f : 
             (data[2 /* petal_len */] <5.0489016f ? 
                 (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.499415f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class IrisPredictor_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_26_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_26_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_26_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_26_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (data[3 /* petal_wid */] <1.75f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.3536086f ? 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6503906f ? 
                    1.0f : 
                     (data[1 /* sepal_wid */] <2.75f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (data[2 /* petal_len */] <4.8497286f ? 
                 (data[0 /* sepal_len */] <6.0484376f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class IrisPredictor_Tree_26_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <7.0492187f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.344336f ? 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.64375f ? 
                    0.0f : 
                     (data[1 /* sepal_wid */] <2.746875f ? 
                        1.0f : 
                        0.0f)) : 
                1.0f) : 
            1.0f) : 
         (data[2 /* petal_len */] <4.8488283f ? 
            0.5f : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class IrisPredictor_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_27_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_27_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_27_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_27_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (data[0 /* sepal_len */] <6.1527343f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.8495178f ? 
                 (data[1 /* sepal_wid */] <2.2515626f ? 
                     (data[2 /* petal_len */] <4.503125f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f) : 
                0.0f) : 
             (data[3 /* petal_wid */] <1.7001724f ? 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.309766f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class IrisPredictor_Tree_27_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <7.0984373f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.450293f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.8488283f ? 
                    0.0f : 
                     (data[2 /* petal_len */] <5.0489807f ? 
                        1.0f : 
                        0.0f))) : 
            1.0f) : 
         (data[3 /* petal_wid */] <1.8503418f ? 
             (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.15f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class IrisPredictor_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_28_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_28_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_28_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_28_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (data[0 /* sepal_len */] <6.1527343f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6503906f ? 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.8488283f ? 
                    1.0f : 
                     (data[1 /* sepal_wid */] <2.453125f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f) : 
             (data[3 /* petal_wid */] <1.7499542f ? 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.033203f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class IrisPredictor_Tree_28_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <7.0984373f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.450293f ? 
                0.0f : 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.9410157f ? 
                     (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6484375f ? 
                        0.0f : 
                        1.0f) : 
                     (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <2.8976562f ? 
                         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.55f ? 
                            1.0f : 
                            0.0f) : 
                        0.0f))) : 
            1.0f) : 
        0.9782609f);
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class IrisPredictor_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_29_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_29_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_29_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_29_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.3496094f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6515625f ? 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.8497286f ? 
                    1.0f : 
                     (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <2.65f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[2 /* petal_len */] <4.8497286f ? 
                     (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.0054688f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
             (data[2 /* petal_len */] <5.049543f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class IrisPredictor_Tree_29_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.750879f ? 
         (data[1 /* sepal_wid */] <2.5484376f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.4505153f ? 
                0.0f : 
                 (data[1 /* sepal_wid */] <2.3496094f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f) : 
         (data[3 /* petal_wid */] <1.75f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.3511214f ? 
                 (data[1 /* sepal_wid */] <2.45f ? 
                    1.0f : 
                    0.0f) : 
                1.0f) : 
             (data[2 /* petal_len */] <4.847421f ? 
                0.5f : 
                1.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class IrisPredictor_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_30_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_30_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_30_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* sepal_len */] <5.4496093f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <2.4519532f ? 
            1.0f : 
            0.0f) : 
         (data[2 /* petal_len */] <2.5959961f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}

class IrisPredictor_Tree_30_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* sepal_wid */] <2.9492188f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.8488283f ? 
             (data[2 /* petal_len */] <2.2015831f ? 
                0.0f : 
                 (data[0 /* sepal_len */] <4.946875f ? 
                     (data[1 /* sepal_wid */] <2.45f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f)) : 
             (data[0 /* sepal_len */] <6.1492186f ? 
                 (Double.isNaN(data[0]) || data[0 /* sepal_len */] <5.9000425f ? 
                    0.0f : 
                     (data[1 /* sepal_wid */] <2.4515624f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <3.005078f ? 
            0.0f : 
             (data[0 /* sepal_len */] <5.797656f ? 
                1.0f : 
                 (data[3 /* petal_wid */] <1.5464844f ? 
                    1.0f : 
                     (data[0 /* sepal_len */] <6.3515625f ? 
                         (data[1 /* sepal_wid */] <3.1f ? 
                            0.0f : 
                             (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.162031f ? 
                                1.0f : 
                                0.0f)) : 
                        0.0f)))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class IrisPredictor_Tree_30_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.1509767f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.750879f ? 
             (data[1 /* sepal_wid */] <2.5480468f ? 
                 (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <2.4501846f ? 
                    0.0f : 
                     (data[0 /* sepal_len */] <5.003125f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f) : 
             (data[0 /* sepal_len */] <5.850916f ? 
                1.0f : 
                 (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.1f ? 
                     (data[3 /* petal_wid */] <1.7125f ? 
                         (data[1 /* sepal_wid */] <2.453125f ? 
                            1.0f : 
                            0.0f) : 
                        1.0f) : 
                    0.0f))) : 
         (data[2 /* petal_len */] <4.8488283f ? 
            0.0f : 
            1.0f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}


class IrisPredictor_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_31_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_31_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_31_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_31_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
             (data[0 /* sepal_len */] <4.946875f ? 
                0.0f : 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.3515625f ? 
                    1.0f : 
                     (data[1 /* sepal_wid */] <2.8445313f ? 
                         (data[2 /* petal_len */] <5.0234804f ? 
                            1.0f : 
                             (data[0 /* sepal_len */] <6.0525f ? 
                                1.0f : 
                                0.0f)) : 
                        1.0f))) : 
             (data[3 /* petal_wid */] <1.8510742f ? 
                 (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.15f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class IrisPredictor_Tree_31_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.750879f ? 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6515625f ? 
            0.0f : 
            1.0f) : 
         (data[0 /* sepal_len */] <6.0507812f ? 
             (data[3 /* petal_wid */] <1.703125f ? 
                0.0f : 
                 (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.098828f ? 
                    1.0f : 
                    0.0f)) : 
             (data[3 /* petal_wid */] <1.75f ? 
                 (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <2.901172f ? 
                     (data[2 /* petal_len */] <5.002729f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class IrisPredictor_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_32_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_32_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_32_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_32_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (data[3 /* petal_wid */] <1.6487312f ? 
             (data[1 /* sepal_wid */] <2.253125f ? 
                0.0f : 
                1.0f) : 
             (data[3 /* petal_wid */] <1.7501519f ? 
                 (data[1 /* sepal_wid */] <2.74375f ? 
                    0.0f : 
                    1.0f) : 
                 (data[0 /* sepal_len */] <6.0015626f ? 
                     (data[2 /* petal_len */] <4.871875f ? 
                        1.0f : 
                        0.0f) : 
                    0.0f))));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class IrisPredictor_Tree_32_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (data[1 /* sepal_wid */] <2.2507813f ? 
            1.0f : 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.646875f ? 
                0.0f : 
                 (data[0 /* sepal_len */] <5.797656f ? 
                    1.0f : 
                    0.0f))) : 
         (data[0 /* sepal_len */] <6.0015626f ? 
             (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.0992188f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class IrisPredictor_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_33_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_33_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_33_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_33_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (data[2 /* petal_len */] <4.749821f ? 
             (data[0 /* sepal_len */] <4.9527345f ? 
                 (data[1 /* sepal_wid */] <2.4484375f ? 
                    1.0f : 
                    0.0f) : 
                1.0f) : 
             (data[2 /* petal_len */] <5.199175f ? 
                 (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.60625f ? 
                     (data[1 /* sepal_wid */] <2.746875f ? 
                         (data[3 /* petal_wid */] <1.7125f ? 
                             (data[1 /* sepal_wid */] <2.3503907f ? 
                                0.0f : 
                                1.0f) : 
                            0.0f) : 
                        0.0f) : 
                     (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.052603f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class IrisPredictor_Tree_33_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.750879f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.4505153f ? 
            0.0f : 
             (data[0 /* sepal_len */] <5.249219f ? 
                1.0f : 
                0.0f)) : 
         (data[1 /* sepal_wid */] <2.5484376f ? 
             (data[1 /* sepal_wid */] <2.3503997f ? 
                1.0f : 
                 (data[2 /* petal_len */] <4.943964f ? 
                    0.0f : 
                    1.0f)) : 
             (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.1497743f ? 
                 (data[2 /* petal_len */] <5.195814f ? 
                     (data[3 /* petal_wid */] <1.75f ? 
                         (data[1 /* sepal_wid */] <2.900658f ? 
                             (data[0 /* sepal_len */] <6.1525f ? 
                                0.0f : 
                                1.0f) : 
                            0.0f) : 
                        1.0f) : 
                    1.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}


class IrisPredictor_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_34_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_34_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_34_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_34_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.7499542f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.04375f ? 
                 (data[0 /* sepal_len */] <4.946875f ? 
                     (data[3 /* petal_wid */] <1.35f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f) : 
                 (data[0 /* sepal_len */] <6.0578127f ? 
                    1.0f : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class IrisPredictor_Tree_34_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.0504885f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.4488497f ? 
                0.0f : 
                 (data[0 /* sepal_len */] <5.253125f ? 
                    1.0f : 
                    0.0f)) : 
             (data[0 /* sepal_len */] <6.0507812f ? 
                0.0f : 
                1.0f)) : 
        0.9782609f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class IrisPredictor_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_35_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_35_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_35_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_35_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.3500977f ? 
                1.0f : 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.9539795f ? 
                    1.0f : 
                     (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.5496514f ? 
                        0.0f : 
                        1.0f))) : 
             (data[0 /* sepal_len */] <5.9453125f ? 
                 (data[2 /* petal_len */] <4.8497286f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class IrisPredictor_Tree_35_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.750879f ? 
        0.010526316f : 
         (data[3 /* petal_wid */] <1.75f ? 
             (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.500781f ? 
                 (data[2 /* petal_len */] <4.943964f ? 
                    0.0f : 
                     (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.55f ? 
                        1.0f : 
                        0.0f)) : 
                0.0f) : 
             (data[0 /* sepal_len */] <5.9453125f ? 
                 (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.09375f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class IrisPredictor_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_36_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_36_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_36_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_36_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.945292f ? 
                 (data[1 /* sepal_wid */] <2.54375f ? 
                     (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.4546876f ? 
                        1.0f : 
                         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.5976562f ? 
                            1.0f : 
                            0.0f)) : 
                    1.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6503906f ? 
                    0.0f : 
                    1.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class IrisPredictor_Tree_36_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <7.0492187f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.952539f ? 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.64375f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <2.9f ? 
                    1.0f : 
                    0.0f)) : 
            1.0f) : 
        0.9782609f);
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class IrisPredictor_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_37_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_37_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_37_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_37_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
             (Double.isNaN(data[0]) || data[0 /* sepal_len */] <7.0984373f ? 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.3515625f ? 
                    1.0f : 
                     (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.9539795f ? 
                        1.0f : 
                         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.5078125f ? 
                            0.0f : 
                            1.0f))) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class IrisPredictor_Tree_37_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.750879f ? 
        0.010526316f : 
         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.55f ? 
            1.0f : 
             (data[3 /* petal_wid */] <1.75f ? 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.397294f ? 
                    0.0f : 
                    1.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}


class IrisPredictor_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_38_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_38_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_38_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_38_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.750879f ? 
            1.0f : 
             (data[0 /* sepal_len */] <6.6007814f ? 
                0.0f : 
                 (data[2 /* petal_len */] <5.044704f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class IrisPredictor_Tree_38_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.952539f ? 
            0.0f : 
             (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.398828f ? 
                1.0f : 
                0.0f)) : 
        0.9782609f);
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class IrisPredictor_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_39_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_39_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_39_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_39_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.7499542f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.0447264f ? 
                1.0f : 
                0.0f) : 
             (data[0 /* sepal_len */] <6.0478516f ? 
                 (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.096875f ? 
                    0.0f : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class IrisPredictor_Tree_39_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <7.0984373f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.346875f ? 
                0.0f : 
                 (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.35f ? 
                     (data[0 /* sepal_len */] <6.053125f ? 
                        0.0f : 
                         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.9640627f ? 
                            0.0f : 
                            1.0f)) : 
                    0.0f)) : 
            1.0f) : 
         (data[2 /* petal_len */] <4.8488283f ? 
             (data[1 /* sepal_wid */] <2.9984374f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class IrisPredictor_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_40_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_40_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_40_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_40_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (data[2 /* petal_len */] <4.8488283f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.7513313f ? 
                1.0f : 
                 (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.0007813f ? 
                     (data[0 /* sepal_len */] <6.49375f ? 
                        0.0f : 
                        1.0f) : 
                    1.0f)) : 
             (data[0 /* sepal_len */] <6.3472657f ? 
                 (data[3 /* petal_wid */] <1.7034912f ? 
                     (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <2.75f ? 
                         (data[1 /* sepal_wid */] <2.3546875f ? 
                            0.0f : 
                            1.0f) : 
                        0.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class IrisPredictor_Tree_40_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.952539f ? 
            0.0f : 
             (data[0 /* sepal_len */] <6.1521482f ? 
                 (data[2 /* petal_len */] <5.053125f ? 
                    1.0f : 
                    0.0f) : 
                1.0f)) : 
         (data[2 /* petal_len */] <4.8488283f ? 
             (data[1 /* sepal_wid */] <3.0001953f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class IrisPredictor_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_41_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_41_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_41_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_41_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (data[2 /* petal_len */] <4.952539f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6503906f ? 
                1.0f : 
                 (data[0 /* sepal_len */] <5.9453125f ? 
                     (data[1 /* sepal_wid */] <2.8507812f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f)) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class IrisPredictor_Tree_41_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.4512696f ? 
            0.0f : 
             (data[0 /* sepal_len */] <5.150781f ? 
                1.0f : 
                0.0f)) : 
         (data[2 /* petal_len */] <4.9006834f ? 
             (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.096875f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class IrisPredictor_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_42_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_42_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_42_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_42_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (data[2 /* petal_len */] <4.749821f ? 
            1.0f : 
             (data[1 /* sepal_wid */] <2.5484376f ? 
                 (data[2 /* petal_len */] <4.9430013f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}

class IrisPredictor_Tree_42_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.952539f ? 
            0.0f : 
            1.0f) : 
        0.9782609f);
    return pred;
  } // constant pool size = 10B, number of visited nodes = 2, static init size = 0B
}


class IrisPredictor_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_43_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_43_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_43_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* sepal_len */] <5.4496093f ? 
         (data[1 /* sepal_wid */] <2.6984375f ? 
             (data[0 /* sepal_len */] <4.698828f ? 
                1.0f : 
                0.0f) : 
             (Double.isNaN(data[0]) || data[0 /* sepal_len */] <5.349219f ? 
                1.0f : 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <0.953125f ? 
                    1.0f : 
                    0.0f))) : 
         (data[2 /* petal_len */] <2.5959961f ? 
            1.0f : 
            0.0f));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class IrisPredictor_Tree_43_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* sepal_wid */] <2.9492188f ? 
         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.251172f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.745117f ? 
                 (data[3 /* petal_wid */] <0.653125f ? 
                    0.0f : 
                     (data[0 /* sepal_len */] <4.9484377f ? 
                        0.0f : 
                        1.0f)) : 
                 (data[3 /* petal_wid */] <1.703125f ? 
                     (data[2 /* petal_len */] <5.04375f ? 
                        0.0f : 
                         (data[2 /* petal_len */] <5.347949f ? 
                            1.0f : 
                            0.0f)) : 
                    0.0f)) : 
             (data[1 /* sepal_wid */] <2.601172f ? 
                 (data[2 /* petal_len */] <5.3558593f ? 
                    1.0f : 
                    0.0f) : 
                0.0f)) : 
         (data[2 /* petal_len */] <3.0511718f ? 
            0.0f : 
             (data[2 /* petal_len */] <5.0466247f ? 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.7480469f ? 
                    1.0f : 
                     (data[1 /* sepal_wid */] <3.109375f ? 
                        0.0f : 
                        1.0f)) : 
                0.0f)));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class IrisPredictor_Tree_43_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.1509767f ? 
         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <5.7496905f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.6990232f ? 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6f ? 
                    0.0f : 
                    1.0f) : 
                1.0f) : 
             (data[1 /* sepal_wid */] <2.646875f ? 
                 (data[3 /* petal_wid */] <1.20625f ? 
                    0.0f : 
                    1.0f) : 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.703125f ? 
                    0.0f : 
                     (data[2 /* petal_len */] <4.940625f ? 
                         (data[1 /* sepal_wid */] <3.1058104f ? 
                            1.0f : 
                            0.0f) : 
                        1.0f)))) : 
         (data[2 /* petal_len */] <5.0504885f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
                0.0f : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}


class IrisPredictor_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_44_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_44_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_44_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_44_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (data[3 /* petal_wid */] <1.6487312f ? 
             (Double.isNaN(data[0]) || data[0 /* sepal_len */] <7.0503907f ? 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.45f ? 
                    1.0f : 
                     (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.9640627f ? 
                        1.0f : 
                         (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <2.75f ? 
                             (data[1 /* sepal_wid */] <2.46125f ? 
                                0.0f : 
                                1.0f) : 
                            0.0f))) : 
                0.0f) : 
            0.0f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class IrisPredictor_Tree_44_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <7.0492187f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.646875f ? 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.9410157f ? 
                    0.0f : 
                     (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <2.75f ? 
                         (data[1 /* sepal_wid */] <2.4578125f ? 
                            1.0f : 
                            0.0f) : 
                        1.0f)) : 
                1.0f) : 
            1.0f) : 
        0.9782609f);
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class IrisPredictor_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_45_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_45_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_45_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[0 /* sepal_len */] <5.4496093f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <2.4519532f ? 
            1.0f : 
            0.0f) : 
         (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.9992187f ? 
             (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.4475052f ? 
                0.0f : 
                 (data[1 /* sepal_wid */] <3.5507753f ? 
                    1.0f : 
                    0.0f)) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class IrisPredictor_Tree_45_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[1 /* sepal_wid */] <2.9492188f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.8488283f ? 
             (data[0 /* sepal_len */] <4.946875f ? 
                 (data[3 /* petal_wid */] <0.653125f ? 
                    0.0f : 
                     (data[3 /* petal_wid */] <1.3483155f ? 
                        1.0f : 
                        0.0f)) : 
                1.0f) : 
             (data[2 /* petal_len */] <5.2013736f ? 
                 (data[0 /* sepal_len */] <5.903125f ? 
                    0.0f : 
                     (data[0 /* sepal_len */] <6.1480713f ? 
                         (data[2 /* petal_len */] <5.050687f ? 
                            0.0f : 
                            1.0f) : 
                        0.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <5.548047f ? 
            0.0f : 
             (data[3 /* petal_wid */] <1.703125f ? 
                 (data[2 /* petal_len */] <2.7976563f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* sepal_len */] <7.0914063f ? 
                        1.0f : 
                        0.0f)) : 
                 (data[0 /* sepal_len */] <5.950391f ? 
                    1.0f : 
                    0.0f))));
    return pred;
  } // constant pool size = 58B, number of visited nodes = 14, static init size = 0B
}

class IrisPredictor_Tree_45_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.1509767f ? 
         (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.750879f ? 
             (data[1 /* sepal_wid */] <2.5484376f ? 
                 (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.496875f ? 
                    0.0f : 
                    1.0f) : 
                0.0f) : 
             (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.096875f ? 
                 (data[0 /* sepal_len */] <5.8979135f ? 
                    1.0f : 
                     (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.0494785f ? 
                         (data[3 /* petal_wid */] <1.54375f ? 
                            1.0f : 
                             (data[2 /* petal_len */] <4.96f ? 
                                1.0f : 
                                0.0f)) : 
                        1.0f)) : 
                0.0f)) : 
         (Double.isNaN(data[0]) || data[0 /* sepal_len */] <7.049401f ? 
             (data[3 /* petal_wid */] <1.6515625f ? 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.9410157f ? 
                    0.0f : 
                    1.0f) : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 50B, number of visited nodes = 12, static init size = 0B
}


class IrisPredictor_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_46_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_46_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_46_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_46_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (data[0 /* sepal_len */] <5.751953f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6f ? 
                1.0f : 
                0.0f) : 
             (data[3 /* petal_wid */] <1.75f ? 
                 (data[1 /* sepal_wid */] <2.64375f ? 
                     (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.745477f ? 
                        1.0f : 
                        0.0f) : 
                    1.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class IrisPredictor_Tree_46_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.750879f ? 
         (data[1 /* sepal_wid */] <2.5484376f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6f ? 
                0.0f : 
                1.0f) : 
            0.0f) : 
         (data[3 /* petal_wid */] <1.75f ? 
             (data[1 /* sepal_wid */] <2.646875f ? 
                1.0f : 
                0.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class IrisPredictor_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_47_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_47_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_47_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_47_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
             (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.449707f ? 
                1.0f : 
                 (data[1 /* sepal_wid */] <2.6453125f ? 
                    0.0f : 
                     (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.405734f ? 
                        1.0f : 
                        0.0f))) : 
            0.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class IrisPredictor_Tree_47_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.750879f ? 
         (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.6515625f ? 
            0.0f : 
            1.0f) : 
         (data[3 /* petal_wid */] <1.75f ? 
             (data[1 /* sepal_wid */] <2.5007813f ? 
                1.0f : 
                 (Double.isNaN(data[2]) || data[2 /* petal_len */] <5.397294f ? 
                    0.0f : 
                    1.0f)) : 
            1.0f));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class IrisPredictor_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_48_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_48_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_48_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_48_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* petal_wid */] <0.80078125f ? 
        0.0f : 
         (data[0 /* sepal_len */] <6.251172f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.745117f ? 
                1.0f : 
                 (data[3 /* petal_wid */] <1.7034912f ? 
                    1.0f : 
                     (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.1f ? 
                        0.0f : 
                        1.0f))) : 
             (data[3 /* petal_wid */] <1.7001724f ? 
                1.0f : 
                0.0f)));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class IrisPredictor_Tree_48_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* petal_wid */] <1.75f ? 
        0.048076924f : 
         (data[2 /* petal_len */] <4.8488283f ? 
             (data[0 /* sepal_len */] <5.9453125f ? 
                0.0f : 
                1.0f) : 
            1.0f));
    return pred;
  } // constant pool size = 14B, number of visited nodes = 3, static init size = 0B
}


class IrisPredictor_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += IrisPredictor_Tree_49_class_0.score0(fdata);
    preds[2] += IrisPredictor_Tree_49_class_1.score0(fdata);
    preds[3] += IrisPredictor_Tree_49_class_2.score0(fdata);
  }
}
class IrisPredictor_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        1.0f : 
        0.0f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class IrisPredictor_Tree_49_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* petal_len */] <2.4519532f ? 
        0.0f : 
         (data[3 /* petal_wid */] <1.75f ? 
             (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.945292f ? 
                1.0f : 
                 (data[3 /* petal_wid */] <1.5496094f ? 
                    0.0f : 
                     (Double.isNaN(data[0]) || data[0 /* sepal_len */] <6.94375f ? 
                        1.0f : 
                        0.0f))) : 
             (data[3 /* petal_wid */] <1.8510742f ? 
                 (data[2 /* petal_len */] <4.8497286f ? 
                     (Double.isNaN(data[1]) || data[1 /* sepal_wid */] <3.0992188f ? 
                        0.0f : 
                        1.0f) : 
                    0.0f) : 
                0.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class IrisPredictor_Tree_49_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* petal_len */] <4.750879f ? 
        0.010526316f : 
         (data[3 /* petal_wid */] <1.75f ? 
             (data[1 /* sepal_wid */] <2.3515625f ? 
                1.0f : 
                 (data[2 /* petal_len */] <5.054297f ? 
                    0.0f : 
                     (data[0 /* sepal_len */] <6.071875f ? 
                        0.0f : 
                        1.0f))) : 
             (data[3 /* petal_wid */] <1.8510742f ? 
                 (data[0 /* sepal_len */] <5.9453125f ? 
                     (data[2 /* petal_len */] <4.9640627f ? 
                        0.0f : 
                        1.0f) : 
                    1.0f) : 
                1.0f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}



